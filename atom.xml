<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuluo25&#39;blog</title>
  
  
  <link href="https://blog.yuluo.link/atom.xml" rel="self"/>
  
  <link href="https://blog.yuluo.link/"/>
  <updated>2024-11-01T06:57:47.672Z</updated>
  <id>https://blog.yuluo.link/</id>
  
  <author>
    <name>yuluo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>follow-verify</title>
    <link href="https://blog.yuluo.link/post/follow-verify/"/>
    <id>https://blog.yuluo.link/post/follow-verify/</id>
    <published>2024-10-16T00:00:00.000Z</published>
    <updated>2024-11-01T06:57:47.672Z</updated>
    
    <content type="html"><![CDATA[<p>This message is used to verify that this feed (feedId:69247643610012672) belongs to me (userId:62034052875345920). Join me in enjoying the next generation information browser <a href="https://follow.is/">https://follow.is</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This message is used to verify that this feed (feedId:69247643610012672) belongs to me (userId:62034052875345920). Join me in enjoying th</summary>
      
    
    
    
    <category term="Blog" scheme="https://blog.yuluo.link/categories/Blog/"/>
    
    
    <category term="java" scheme="https://blog.yuluo.link/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>解决Feign传递MultipartFile参数报错的问题</title>
    <link href="https://blog.yuluo.link/post/Feign-passing-MultipartFile-error/"/>
    <id>https://blog.yuluo.link/post/Feign-passing-MultipartFile-error/</id>
    <published>2023-07-27T16:21:42.000Z</published>
    <updated>2024-11-01T06:57:47.672Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了在使用Feign进行RPC请求时，传递MultipartFile参数可能会导致”Current request is not a multipart request”错误的问题，并提供了相应的解决方案。</p><span id="more"></span><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>Feign通过HTTP协议进行远程调用，当传递<code>MultipartFile</code>参数时，需要将请求头设置为<code>multipart/form-data</code>类型，以便服务器正确解析参数。然而，默认情况下，Feign并不会自动将请求头设置为<code>multipart/form-data</code>，从而导致服务器无法正确处理MultipartFile参数，进而报错”Current request is not a multipart request”。</p><p>这个原因大概是Feign发起rpc请求时，没有将参数 <code>MultipartFile</code> 正确的设置为 <code>multipart/form-data</code> 类型，从而导致服务器不能正确的解析参数。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>要解决这个问题，我们需要在Feign客户端和被调用服务端分别进行相应的配置。</p><h3 id="Feign客户端方面代码"><a href="#Feign客户端方面代码" class="headerlink" title="Feign客户端方面代码"></a>Feign客户端方面代码</h3><p>在Feign客户端接口中，我们需要添加<code>consumes = MediaType.MULTIPART_FORM_DATA_VALUE</code>到<code>@GetMapping</code>注解中，同时，将<code>MultipartFile</code>参数的注解改为<code>@RequestPart</code>，以确保Feign正确处理MultipartFile参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;example-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExampleFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/endpoint&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    String <span class="title function_">getEndpointData</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                           <span class="meta">@RequestParam(&quot;param2&quot;)</span> <span class="type">int</span> param2,</span></span><br><span class="line"><span class="params">                           <span class="meta">@RequestParam(&quot;param3&quot;)</span> <span class="type">boolean</span> param3)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign被调用服务端"><a href="#Feign被调用服务端" class="headerlink" title="Feign被调用服务端"></a>Feign被调用服务端</h3><p>在被调用服务端的控制器中，我们同样需要使用<code>@RequestPart</code>来接收MultipartFile参数，并确保Feign客户端传递参数时，请求头被设置为<code>multipart/form-data</code>类型。</p><blockquote><p>ps:经过实测，在被调用方就算使用 <code>@RequestParam</code> 来接收MultipartFile参数，也是可以正常运行的。但是规范起见，建议还是使用 <code>@RequestPart</code>来接收MultipartFile参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExampleFeignClient feignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleController</span><span class="params">(ExampleFeignClient feignClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.feignClient = feignClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call-remote-service&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callRemoteService</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@RequestParam(&quot;param2&quot;)</span> <span class="type">int</span> param2,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@RequestParam(&quot;param3&quot;)</span> <span class="type">boolean</span> param3)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> feignClient.getEndpointData(param1, param2, param3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，Feign客户端和被调用服务端都正确配置了MultipartFile参数的传递方式。这个问题应该不会再出现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了在使用Feign进行RPC请求时，传递MultipartFile参数可能会导致”Current request is not a multipart request”错误的问题，并提供了相应的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="踩坑记录" scheme="https://blog.yuluo.link/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="java" scheme="https://blog.yuluo.link/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>提高elasticSearch搜索的准确率</title>
    <link href="https://blog.yuluo.link/post/improving-accuracy-of-elasticSearch/"/>
    <id>https://blog.yuluo.link/post/improving-accuracy-of-elasticSearch/</id>
    <published>2023-05-20T00:00:00.000Z</published>
    <updated>2024-11-01T06:57:47.672Z</updated>
    
    <content type="html"><![CDATA[<p>全文检索在信息检索领域具有重要意义，然而，在实际工作中，直接使用es+ik分词器的组合，会使得搜索结果的准确度会大打折扣。本文针对这一问题进行了深入分析，并提出了多项优化策略，旨在提高搜索结果的精准度和用户体验。</p><span id="more"></span><h2 id="当搜索词不能被正确分词时，搜索结果劣化"><a href="#当搜索词不能被正确分词时，搜索结果劣化" class="headerlink" title="当搜索词不能被正确分词时，搜索结果劣化"></a>当搜索词不能被正确分词时，搜索结果劣化</h2><p>上传一个文档包含<code>测试表格内容搜索</code>时，再进行搜索</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305041556684.png" alt="image.png"></p><p>可以看到目标十分靠后。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>产生这个现象的原因和elasticSearch的分词有关。众所周知es有个分词器，将保存的文本进行分词后建立索引。</p><p>以上述 <code>测试表格内容搜索</code> 这个关键词为例，假定会被分为“测试”、“表格”、“内容”、“搜索”这四个词。在用<code>测试表格内容搜索</code> 作为关键词搜索时，es就会使用上述的四个词，作为查询条件去倒排索引中匹配文档。找到包含至少一个关键词的文档。并且计算每个文档的相关度得分，并根据得分进行排序。最后，返回匹配的文档以及相关度得分的排名结果。</p><p>所以出现了搜索<code>测试表格内容搜索</code> 出现了表格、测试等这些零散的关键词，而用户搜索想要的结果却排在后面。</p><h1 id="优化es评分策略"><a href="#优化es评分策略" class="headerlink" title="优化es评分策略"></a>优化es评分策略</h1><h2 id="针对当前问题"><a href="#针对当前问题" class="headerlink" title="针对当前问题"></a>针对当前问题</h2><p>如搜索<code>硬件设备需求表</code>时，结果很多是关于“硬件”、“设备”等零散的关键词，而用户想要匹配整个短语的结果却在后面。</p><p>导致这件事的原因，是es搜索时使用 <code>search_analyzer(分析器)</code> 导致查询关键词被分词的策略导致的。<br>执行查询时，es先把查询关键词经过 search_analyzer 设置的分析器分析，再把分析器得到的结果挨个放进 bool 查询中的 should 语句，这些 should 没有权重与顺序的差别，并且只要命中一个should 语句的文档都会被返回。所以导致 <code>硬件设备需求表</code> 这个词，在搜索时，实际上是用“硬件”、“设备”等这些词进行搜索。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h4><p>使用 <code>match_phrase</code> 搜索词组，match_phrase 查询会将查询字符串视为一个完整的短语，而不是将其拆分为词汇单元进行匹配。</p><p>以上是官方对于他的定义，但实际上 <code>match_phrase</code> 并不能去匹配完整的短语，因为es使用倒排索引进行搜索，而在倒排索引中存储的是分词之后的结果，根本没有原文。所以在使用<code>match_phrase</code> 时很可能会遇到搜索不到的情况。我将在下文详细讲解。</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305060811282.png" alt="image.png"></p><p>像这样我们就能搜索到想要的短语了。除此之外还可以使用 <code>slop</code> 属性来设置搜索短语的最短出现词间距。</p><h4 id="优化查询权重"><a href="#优化查询权重" class="headerlink" title="优化查询权重"></a>优化查询权重</h4><p>目前产品中的es搜索查询权重均为1.0，查询字段没有权重之分。一般来说标题的权重应该高于正文的权重，准确匹配的权重高于模糊匹配。我们应该根据实际情况，将重要字段的权重提升到合理范围。</p><p>但是应该注意的是，我们的评分中含有用户点击量这个影响因子。应该控制这个分数的上限（或者是权重）。避免出现用户搜索 0.1 热度文档的匹配度为 1000 热度文档的 100 倍，但结果排名依然比不过 1000 热度的文档。</p><p>解决：使用 function_score 自定义分数时，用 <code>field_value_factor</code> 对于自定义的分数做后处理。可选参数为</p><ul><li><code>none</code>（默认值），不进行任何操作，直接使用 <code>factor</code> 指定的加权因子。</li><li><code>log</code>，对加权因子进行对数运算，可以减小极大值和极小值之间的差距。</li><li><code>log1p</code>，对加权因子加1后，进行对数运算。</li><li><code>log2p</code>，对加权因子加2后，进行对数运算。</li><li><code>ln</code>，使用自然对数函数 <code>ln</code> 进行运算。</li><li><code>square</code>，对加权因子进行平方运算。</li><li><code>sqrt</code>，对加权因子进行平方根运算。</li></ul><p>结合此处不希望评分受到用户点击量过多导致评分过高的需求，应使用 <code>log1p</code> 对点击评分做标准化。下图为log1p的函数图像。</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305060835796.png" alt="image.png"></p><h4 id="调整es的评分算法"><a href="#调整es的评分算法" class="headerlink" title="调整es的评分算法"></a>调整es的评分算法</h4><p>根据es<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index-modules-similarity.html#_available_similarities">文档</a>，产品版本默认使用 <code>BM25</code> 算法作为es相似度算法。对于此算法本文不做解释。我们现在主要讨论怎样控制算法达到我们的要求。BM25有三个可选参数：</p><p><code>k1</code>：控制非线性术语频率归一化（饱和度）。默认值为1.2。<br><code>b</code>：控制文档长度对tf值进行归一化的程度。默认值为0.75。<br><code>discount_overlaps</code>：确定在计算标准化时是否忽略重叠的标记（位置增量为0的标记）。默认情况下为true，意味着在计算标准化时不考虑重叠的标记。</p><p>用人话来说就是，将 <code>k1</code> 的值从默认的1.2增加到1.5，增加非线性归一化的程度。这样做可以使得高频词的权重更突出。<br>将 <code>b</code> 的值从默认的0.75减小到0.6，以减小文档长度对tf值的归一化程度。这样做可以使得较长的文档不会在评分上过于受到惩罚。<br><code>discount_overlaps</code> 默认为true，会忽略短时间重复出现的编辑，如果一个文档中有多个相同的词汇出现在相邻的位置，那么这些重叠的标记只会被计算一次。</p><p>具体到本次优化，可以适当降低 b 的值，使得 content 短的文档不被突出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /knowledge_document/_settings</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;similarity&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BM25&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;k1&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;discount_overlaps&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="加入近义词、同义词"><a href="#加入近义词、同义词" class="headerlink" title="加入近义词、同义词"></a>加入近义词、同义词</h4><p>ES提供了同义词过滤器，可以将同义词映射到一个共同的标记。通过在分析器（Analyzer）链中添加同义词过滤器，可以扩展搜索的匹配范围。例如，将”<code>实验</code>“和”<code>试验</code>“映射到同一个标记。扩大搜索范围。</p><p>但是中文字、词表达的意义多样，多音字、同义词又众多的情况下，靠开发团队很难实现快速的解决优化。</p><h3 id="仍待解决的问题"><a href="#仍待解决的问题" class="headerlink" title="仍待解决的问题"></a>仍待解决的问题</h3><p>从原理上来说<code>match_phrase</code>仍然无法根治这个问题，match_phrase查找时，查找分词器分出的词的位置和要建索引时分出的词的位置一样。举个例子：</p><p>这里保存的数据是”Asdasd表1 测试标题搜索测试表格内容搜索测试正文搜索”<br>而这个文件在es中的倒排索引长这样</p><figure class="highlight json"><figcaption><span>点击查看 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;knowledge_document&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;-2KG5IcBO2ayB5FAaPA0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;term_vectors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileContent&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;field_statistics&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sum_doc_freq&quot;</span> <span class="punctuation">:</span> <span class="number">10161131</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">11714</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sum_ttf&quot;</span> <span class="punctuation">:</span> <span class="number">51665947</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;1&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;asdasd&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;内容&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;搜索&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">23</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">29</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;标题&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;格&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;正文&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">27</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;测试&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;表&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;表格&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;试表&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当我们使用 <code>match_phrase</code> 搜索 <code>测试标题搜索</code> 这个关键词时，实际上这个关键词还是会被分析器分词为”测试”,”标题”,”搜索”这样的关键词去搜索。<code>match_phrase</code> 查询强调术语在文档中的相对位置，只返回那些所有术语都按照指定顺序出现的文档。而<code>match</code>查询则更加宽松，只要文档包含了所有的术语，不论其顺序，都会被匹配和返回。</p><p>所以只有和下图一样同时含有”测试”,”标题”,”搜索”关键词，且前后位置关系相连的结果才会被返回。</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305060948073.png" alt="image.png"></p><p>但是当我们搜索另一个关键词 <code>测试表格内容搜索</code> 时，我们发现位置信息不再连续，导致使用<code>match_phrase</code> 也无法搜索到相关信息。如下图所示。</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305061036646.png" alt="image.png"></p><p>这是因为保存文档时使用了 <code>ik_max_word</code> 进行分词，分的比较细致多出了“试表”这样的分词，导致本来连续的关键词不再连续。解决方法就是使用 <code>slop</code> 参数来调节最小间隔。以避免这种情况下无法匹配到关键词。</p><h4 id="使用match-phrase导致准确率反而下降"><a href="#使用match-phrase导致准确率反而下降" class="headerlink" title="使用match_phrase导致准确率反而下降"></a>使用match_phrase导致准确率反而下降</h4><p>例如，之前在在网上的梗 <code>牙膏我只用中华为的就是刷牙干净速度快，每次只用5g就可以</code>，本来是用来钓鱼的，可是同样也会坑到我们。我相信这样的正文放给无论什么样的分词器都无济于事，一定会分出“华为”、“5G”这样的关键词。而我们同时使用了match_phrase并给了其较高的权重。所以这样的噪声数据一定会被搜到。如下图。</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305081024323.png" alt="image.png"></p><h2 id="进一步的优化方法"><a href="#进一步的优化方法" class="headerlink" title="进一步的优化方法"></a>进一步的优化方法</h2><h3 id="更换更加先进的分词器"><a href="#更换更加先进的分词器" class="headerlink" title="更换更加先进的分词器"></a>更换更加先进的分词器</h3><p>本文使用 <code>hanlp</code> 作为分词器，进行了一系列测试，最终发现解决了一些问题，也引入了一些问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例句子</span></span><br><span class="line">sentence = <span class="string">&quot;牙膏我只用中华为的就是刷牙干净速度快&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示可用的分词模型，语种见名称最后一个字段或相应语料库</span></span><br><span class="line"><span class="built_in">print</span>(hanlp.pretrained.tok.ALL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练模型进行分词任务</span></span><br><span class="line">tok = hanlp.load(hanlp.pretrained.tok.FINE_ELECTRA_SMALL_ZH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分词结果</span></span><br><span class="line">sen_tok = tok(sentence)</span><br><span class="line"><span class="built_in">print</span>(sen_tok)</span><br><span class="line"></span><br><span class="line">--------------------------------------------</span><br><span class="line">输出：</span><br><span class="line">[<span class="string">&#x27;牙膏&#x27;</span>, <span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;用&#x27;</span>, <span class="string">&#x27;中华&#x27;</span>, <span class="string">&#x27;为&#x27;</span>, <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;就&#x27;</span>, <span class="string">&#x27;是&#x27;</span>, <span class="string">&#x27;刷牙&#x27;</span>, <span class="string">&#x27;干净&#x27;</span>, <span class="string">&#x27;速度&#x27;</span>, <span class="string">&#x27;快&#x27;</span>]</span><br></pre></td></tr></table></figure><p>以上是用过python调用hanlp自然语言分词，可以看到分词效果非常不错，同时还支持 <code>COARSE_ELECTRA_SMALL_ZH</code> 粗粒度 ，<code>FINE_ELECTRA_SMALL_ZH</code> 细粒度，两种模型。<br>但是再将 hanlp 引入elasticSearch中，无法调用这些先进模型进行分词。</p><p>目前插件支持的分词类型有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hanlp: hanlp默认分词</span><br><span class="line">hanlp_standard: 标准分词</span><br><span class="line">hanlp_index: 索引分词</span><br><span class="line">hanlp_nlp: NLP分词</span><br><span class="line">hanlp_crf: CRF分词</span><br><span class="line">hanlp_n_short: N-最短路分词</span><br><span class="line">hanlp_dijkstra: 最短路分词</span><br><span class="line">hanlp_speed: 极速词典分词</span><br></pre></td></tr></table></figure><p>经过测试，<code>hanlp_crf</code> 分词器也能取得良好效果。但也存在一个问题，分词的粒度过大且无法调节，如下图，无法将 <code>国家航空航天局</code> 再分，会导致搜索时召回率下降。</p><p>目前正在探索如何将上文python中的分词方法带入es中。</p><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><p>通过使用NLP技术，可以对用户输入的查询进行语义理解，而不仅仅是简单的关键词匹配。这可以帮助系统更好地理解用户的意图并提供更相关的搜索结果。例如，可以应用词义消歧算法来解决查询中的歧义，或者使用命名实体识别技术来识别重要的实体（如”风洞实验数据管理系统”中的”风洞实验”）。</p><p>此外我还注意到我们将文档中的关键词已经提取处理是否可以作为进一步优化搜索结果的判断条件呢？</p><p><img src="https://raw.githubusercontent.com/yuluo25/pic/main/202305080917876.png" alt="image.png"></p><h3 id="矢量搜索"><a href="#矢量搜索" class="headerlink" title="矢量搜索"></a>矢量搜索</h3><p>待最佳实践</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;全文检索在信息检索领域具有重要意义，然而，在实际工作中，直接使用es+ik分词器的组合，会使得搜索结果的准确度会大打折扣。本文针对这一问题进行了深入分析，并提出了多项优化策略，旨在提高搜索结果的精准度和用户体验。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://blog.yuluo.link/categories/Blog/"/>
    
    
    <category term="java" scheme="https://blog.yuluo.link/tags/java/"/>
    
    <category term="elasticSearch" scheme="https://blog.yuluo.link/tags/elasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>抽象类、普通类、接口的一些思考</title>
    <link href="https://blog.yuluo.link/post/reflections-on-abstract-classes-regular-classes-and-interfaces/"/>
    <id>https://blog.yuluo.link/post/reflections-on-abstract-classes-regular-classes-and-interfaces/</id>
    <published>2023-01-11T00:00:00.000Z</published>
    <updated>2024-11-01T06:57:47.672Z</updated>
    
    <content type="html"><![CDATA[<p>2023年1月11日</p><p>最近重构代码时，希望一些通用的功能被多个子类复用。第一时间想到的是抽出为工具类，但工具类是静态类，而此功能需要动态注入一些资源文件，导致此种方法作罢。</p><p>其次就是继承，将通用的方法写入<strong>父类</strong>中，子类通过继承来使用通用的方法。但CR时发现此<strong>父类</strong>应该是抽象类，而不是普通类。进而引发了对抽象类、普通类、接口的一些思考。</p><span id="more"></span><h2 id="抽象类的应用场景"><a href="#抽象类的应用场景" class="headerlink" title="抽象类的应用场景"></a>抽象类的应用场景</h2><h3 id="第一种场景"><a href="#第一种场景" class="headerlink" title="第一种场景"></a>第一种场景</h3><p>通用的功能被多个子类复用的时候</p><p>比如说，AbstractPlayer 抽象类中有一个普通的方法 <code>sleep()</code>，表明所有运动员都需要休息，那么这个方法就可以被子类复用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运动员也要休息而不是挑战极限&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类 BasketballPlayer 继承了 AbstractPlayer 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasketballPlayer</span> <span class="keyword">extends</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就拥有了 <code>sleep()</code> 方法。BasketballPlayer 的对象可以直接调用父类的 <code>sleep()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BasketballPlayer</span> <span class="variable">basketballPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasketballPlayer</span>();</span><br><span class="line">basketballPlayer.sleep();</span><br></pre></td></tr></table></figure><p>子类 FootballPlayer 继承了 AbstractPlayer 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FootballPlayer</span> <span class="keyword">extends</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也拥有了 <code>sleep()</code> 方法，FootballPlayer 的对象也可以直接调用父类的 <code>sleep()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FootballPlayer</span> <span class="variable">footballPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FootballPlayer</span>();</span><br><span class="line">footballPlayer.sleep();</span><br></pre></td></tr></table></figure><p>这样是不是就实现了代码的复用。</p><h3 id="第二种场景"><a href="#第二种场景" class="headerlink" title="第二种场景"></a>第二种场景</h3><p>在抽象类中定义好接口，然后子类中去实现。</p><p>比如说，AbstractPlayer 抽象类中定义了一个抽象方法 <code>play()</code>，表明所有运动员都可以从事某项运动，但需要对应子类去扩展实现，表明篮球运动员打篮球，足球运动员踢足球。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BasketballPlayer 继承了 AbstractPlayer 类，扩展实现了自己的 <code>play()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasketballPlayer</span> <span class="keyword">extends</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是张伯伦，我篮球场上得过 100 分，&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FootballPlayer 继承了 AbstractPlayer 类，扩展实现了自己的 <code>play()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FootballPlayer</span> <span class="keyword">extends</span> <span class="title class_">AbstractPlayer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是C罗，我能接住任意高度的头球&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类与普通类"><a href="#抽象类与普通类" class="headerlink" title="抽象类与普通类"></a>抽象类与普通类</h2><blockquote><p>问：<br>  把父类改成抽象类，方法改成抽象方法，那么public void play();  子类不变，依然重写父类方法，那这个跟普通父类没区别啊？难道说就一个抽象方法没方法体就完事了？？那我普通方法有方法体，我空着不写内容不就得了，不跟抽象方法一个样吗？？别跟我说抽象类还不能实例化，哥也不需要去new它！普通类都能搞定的，还弄个抽象类有什么意义？我前面都说了普通类的方法我可以空着不写，达到跟抽象类方法没方法体一样的效果。既然两种方式都能达到同一个输出效果，弄一种方式不就得了，那为什么还要创造出一个抽象类出来？难道是比普通类看着舒服？用着爽？还是更加便捷？还是为了强制让别人用的时候必须强制化实现抽象方法省的你忘了什么的？</p></blockquote><blockquote><p>答：<br>  就是为了强制不能实例化，以及强制子类必须实现方法这不是你忘不忘的问题，你说你不去new它就行了，这话没错。那你想另一个问题，为什么要有访问控制呢？为什么要有private和public之分呢？我可以全部public，不该访问的，我不访问就行了啊？小程序里，看不出什么区别，反而private成员要写一堆set和get函数，多麻烦，我自己写小程序的时候也会偷懒全部public，但是项目大了，代码多了，这种严谨的结构就很重要了。且不说会有很多人合作一起写一个程序，哪怕还是你一个人写，也保不住有忘记的时候，那时候编译器不报错，茫茫码海上哪找错误去面向对象说到底就是方便你思考，易扩展、易维护管理，硬要说没必要，整个面向对象都没必要了，C语言有什么干不了的呀，运行效率还高。</p></blockquote><p>总而言之使用继承的时候，一定要继承抽象类，或者抽象类的子类。</p><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><p><strong>接口是对动作的抽象，抽象类是对本质的抽象。</strong></p><p>抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人和女人，他们的抽象类是人类，而猫和狗的抽象类是宠物类。人类可以吃东西，宠物类也可以吃东西，但是两者不能混为一谈，因为有本质的区别。这个“吃东西”是一个动作，你可以把“吃东西”定义成一个接口，然后让两个类去实现它的方法。</p><p>所以，在高级语言上，一个类只能继承一个类或抽象类，正如人不可能同时是动物类又是植物类，但是可以实现多个接口，例如，吃饭接口、呼吸接口等。</p><h3 id="使用差异"><a href="#使用差异" class="headerlink" title="使用差异"></a>使用差异</h3><p>a.抽象类 和 接口 都是用来抽象具体对象的，但是接口的抽象级别最高；</p><p>b.抽象类可以有具体的方法和属性,  接口只能有抽象方法和&#x3D;&#x3D;不可变常量(final)&#x3D;&#x3D;；</p><p>c.抽象类主要用来抽象类别,接口主要用来抽象功能；</p><p>d.抽象类中不包含任何实现，派生类必须覆盖它们。接口中所有方法都必须是未实现的；</p><p>e.抽象类实现接口时，接口的方法在抽象类中可以被实现也可以不被实现，而普通实现接口必须实现所有接口方法。</p><h3 id="使用方向"><a href="#使用方向" class="headerlink" title="使用方向"></a>使用方向</h3><ul><li>当你关注一个事物的本质的时候，用抽象类；</li><li>当你关注一个操作的时候，用接口。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/csdn_aiyang/article/details/71171886">Java 抽象类、普通类、接口的区别——值得你一看的干货</a><br><a href="https://tobebetterjavaer.com/oo/abstract.html">Java抽象类，看这一篇就够了，豁然开朗</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023年1月11日&lt;/p&gt;
&lt;p&gt;最近重构代码时，希望一些通用的功能被多个子类复用。第一时间想到的是抽出为工具类，但工具类是静态类，而此功能需要动态注入一些资源文件，导致此种方法作罢。&lt;/p&gt;
&lt;p&gt;其次就是继承，将通用的方法写入&lt;strong&gt;父类&lt;/strong&gt;中，子类通过继承来使用通用的方法。但CR时发现此&lt;strong&gt;父类&lt;/strong&gt;应该是抽象类，而不是普通类。进而引发了对抽象类、普通类、接口的一些思考。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://blog.yuluo.link/categories/Blog/"/>
    
    
    <category term="java" scheme="https://blog.yuluo.link/tags/java/"/>
    
  </entry>
  
</feed>
